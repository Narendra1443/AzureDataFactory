{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "naninew-adf-v2"
		},
		"LS_newsql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_newsql'"
		},
		"LS_keyvault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://naninew-kv.vault.azure.net/"
		},
		"LS_newblob_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "Connectionstring"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_Dummy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait 10 seconds",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ImportSweetTreatsSales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from blob to sqldb",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "SweetTreats",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE dbo.Sales_LOAD",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_sweettreats",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data from blob to sqldb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LogPipelineEnd]",
							"storedProcedureParameters": {
								"FilesRead": {
									"value": {
										"value": "@activity('Copy data from blob to sqldb').output.filesRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"RowsCopied": {
									"value": {
										"value": "@activity('Copy data from blob to sqldb').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"RowsRead": {
									"value": {
										"value": "@activity('Copy data from blob to sqldb').output.rowsRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"RunEndDateTime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"RunSeqNo": {
									"value": {
										"value": "@variables('RunSeqNo')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"RunStatus": {
									"value": "'Done'",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_newsql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogPipelineStart]",
								"storedProcedureParameters": {
									"Comments": {
										"type": "String",
										"value": {
											"value": "@concat('Pipeline ',pipeline().Pipeline,'executed in' ,pipeline().DataFactory)",
											"type": "Expression"
										}
									},
									"PipelineRunId": {
										"type": "Guid",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"RunStartDateTime": {
										"type": "DateTime",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunSeqNo",
							"value": {
								"value": "@string(activity('Lookup1').output.firstRow.RunSeqNo)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"RunSeqNo": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-09-22T10:00:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_sweettreats')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_newsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LoadMultipleFiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_MultipleFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childitems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data from blob to sqldb",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_CopyMultipleFiles",
											"type": "DatasetReference",
											"parameters": {
												"SourceFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_sqlLoadMultipletables",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@concat(replace(item().name,'.csv',' '))",
													"type": "Expression"
												},
												"TableSchema": "dbo"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-09-23T05:44:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_MultipleFiles')]",
				"[concat(variables('factoryId'), '/datasets/DS_CopyMultipleFiles')]",
				"[concat(variables('factoryId'), '/datasets/DS_sqlLoadMultipletables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Load_Multipletable_withemail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup to get tablelist",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from metadata where isdisable=0",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_sql_Gettablelist",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup to get tablelist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup to get tablelist').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata  to check table exists",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_sql_tables_exists",
											"type": "DatasetReference",
											"parameters": {
												"schemaname": {
													"value": "@item().schemaname",
													"type": "Expression"
												},
												"tablename": {
													"value": "@item().tablename",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										]
									}
								},
								{
									"name": "If table exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata  to check table exists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata  to check table exists').output.exists",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "success_sp",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy data from sql to blob",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[Pipeline_log_usp]",
													"storedProcedureParameters": {
														"CopyActivity_End_Time": {
															"value": {
																"value": "@activity('Copy data from sql to blob').ExecutionEndTime",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"CopyActivity_start_Time": {
															"value": {
																"value": "@activity('Copy data from sql to blob').ExecutionStartTime",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"CopyDuration_in_secs": {
															"value": {
																"value": "@activity('Copy data from sql to blob').output.CopyDuration",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"DataFactory_Name": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"Destination": {
															"value": {
																"value": "@item().blobcontainer",
																"type": "Expression"
															},
															"type": "String"
														},
														"effectiveintegrationRuntime": {
															"value": {
																"value": "@activity('Copy data from sql to blob').output.effectiveintegrationRunTime",
																"type": "Expression"
															},
															"type": "String"
														},
														"Error_Message": {
															"value": {
																"value": "@activity('Copy data from sql to blob').Error",
																"type": "Expression"
															},
															"type": "String"
														},
														"Execution_Status": {
															"value": {
																"value": "@activity('Copy data from sql to blob').status",
																"type": "Expression"
															},
															"type": "String"
														},
														"Execution_Status_Code": {
															"value": {
																"value": "@activity('Copy data from sql to blob').statuscode",
																"type": "Expression"
															},
															"type": "String"
														},
														"No_ParallelCopies": {
															"value": {
																"value": "@activity('Copy data from sql to blob').output.usedParallelCopies",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"Pipeline_Name": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"RowsCopied": {
															"value": {
																"value": "@activity('Copy data from sql to blob').output.rowscopied",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"RowsRead": {
															"value": {
																"value": "@activity('Copy data from sql to blob').output.rowsread",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"RunId": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"sink_Type": {
															"value": {
																"value": "@activity('Copy data from sql to blob').output.executiondetails[0].sink.type",
																"type": "Expression"
															},
															"type": "String"
														},
														"Source": {
															"value": {
																"value": "@item().tablename",
																"type": "Expression"
															},
															"type": "String"
														},
														"source_Type": {
															"value": {
																"value": "@activity('Copy data from sql to blob').output.executiondetails[0].source.type",
																"type": "Expression"
															},
															"type": "String"
														},
														"TriggerId": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"TriggerName": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"TriggerTime": {
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"TriggerType": {
															"value": {
																"value": "@pipeline().TriggerType",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_newsql",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Copy data from sql to blob",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "JsonSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "JsonWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_sql_tables_exists",
														"type": "DatasetReference",
														"parameters": {
															"schemaname": "@item().schemaname",
															"tablename": "@item().tablename"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_BLOB_for_tables",
														"type": "DatasetReference",
														"parameters": {
															"containername": "@item().blobcontainer"
														}
													}
												]
											},
											{
												"name": "Failure_sp",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy data from sql to blob",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[Pipeline_log_usp]",
													"storedProcedureParameters": {
														"CopyActivity_End_Time": {
															"value": {
																"value": "@activity('Copy data from sql to blob').ExecutionEndTime",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"CopyActivity_start_Time": {
															"value": {
																"value": "@activity('Copy data from sql to blob').ExecutionStartTime",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"CopyDuration_in_secs": {
															"value": {
																"value": "@activity('Copy data from sql to blob').output.CopyDuration",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"DataFactory_Name": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"Destination": {
															"value": {
																"value": "@item().blobcontainer",
																"type": "Expression"
															},
															"type": "String"
														},
														"effectiveintegrationRuntime": {
															"value": {
																"value": "@activity('Copy data from sql to blob').output.effectiveintegrationRunTime",
																"type": "Expression"
															},
															"type": "String"
														},
														"Error_Message": {
															"value": {
																"value": "@activity('Copy data from sql to blob').Error",
																"type": "Expression"
															},
															"type": "String"
														},
														"Execution_Status": {
															"value": {
																"value": "@activity('Copy data from sql to blob').status",
																"type": "Expression"
															},
															"type": "String"
														},
														"Execution_Status_Code": {
															"value": {
																"value": "@activity('Copy data from sql to blob').statuscode",
																"type": "Expression"
															},
															"type": "String"
														},
														"No_ParallelCopies": {
															"value": {
																"value": "@activity('Copy data from sql to blob').output.usedParallelCopies",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"Pipeline_Name": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"RowsCopied": {
															"value": null,
															"type": "Int32"
														},
														"RowsRead": {
															"value": null,
															"type": "Int32"
														},
														"RunId": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"sink_Type": {
															"value": {
																"value": "@activity('Copy data from sql to blob').output.executiondetails[0].sink.type",
																"type": "Expression"
															},
															"type": "String"
														},
														"Source": {
															"value": {
																"value": "@item().tablename",
																"type": "Expression"
															},
															"type": "String"
														},
														"source_Type": {
															"value": {
																"value": "@activity('Copy data from sql to blob').output.executiondetails[0].source.type",
																"type": "Expression"
															},
															"type": "String"
														},
														"TriggerId": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"TriggerName": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"TriggerTime": {
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															},
															"type": "String"
														},
														"TriggerType": {
															"value": {
																"value": "@pipeline().TriggerType",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_newsql",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "success_Notification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEach table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-29.eastus.logic.azure.com:443/workflows/8f65e748c5f74d2eb78d734440d95c2a/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=ZMLLKdXaIBJSoN5J8jGzsqzJXjFMmy5IZJoecK0toz0",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"DataFactoryName\":\"@{pipeline().DataFactory}\",\n \"emailto\":\"narendra.pillarisetti@gmail.com,\n \"pipelineName\":\"@{pipeline().pipeline}\",\n \"status\":\"Succeeded\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Failure_Notification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEach table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-29.eastus.logic.azure.com:443/workflows/8f65e748c5f74d2eb78d734440d95c2a/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=ZMLLKdXaIBJSoN5J8jGzsqzJXjFMmy5IZJoecK0toz0",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"DataFactoryName\":\"@{pipeline().DataFactory}\",\n \"emailto\":\"narendra.pillarisetti@gmail.com,\n \"pipelineName\":\"@{pipeline().pipeline}\",\n \"status\":\"Failure\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-09-26T05:19:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_sql_Gettablelist')]",
				"[concat(variables('factoryId'), '/datasets/DS_sql_tables_exists')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_newsql')]",
				"[concat(variables('factoryId'), '/datasets/DS_BLOB_for_tables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Sql_To_Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n *\n FROM\n naninewsqldb.INFORMATION_SCHEMA.TABLES\n WHERE table_type = 'BASE TABLE'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_sqlLoadTables",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LoadTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LoadTables').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data from sql to blob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_readtables",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												},
												"TableSchema": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_loadcsvformat",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@concat(item().TABLE_SCHEMA,'_',item().TABLE_NAME,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-09-23T06:35:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_sqlLoadTables')]",
				"[concat(variables('factoryId'), '/datasets/DS_readtables')]",
				"[concat(variables('factoryId'), '/datasets/DS_loadcsvformat')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_data_sql_to_blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "nani copy activity",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2
						},
						"inputs": [
							{
								"referenceName": "DS_sql_source",
								"type": "DatasetReference",
								"parameters": {
									"sourcetablename": {
										"value": "@pipeline().parameters.pptablename",
										"type": "Expression"
									},
									"sourceschemaname": {
										"value": "@pipeline().parameters.ppschemaname",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_abs_json_sink",
								"type": "DatasetReference",
								"parameters": {
									"sinkcontainer": {
										"value": "@pipeline().parameters.ppcontainername",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.ppfilename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "success_Notification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "nani copy activity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-29.eastus.logic.azure.com:443/workflows/8f65e748c5f74d2eb78d734440d95c2a/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=ZMLLKdXaIBJSoN5J8jGzsqzJXjFMmy5IZJoecK0toz0",
							"method": "POST",
							"headers": {},
							"body": {
								"datafactoryname": "@{pipeline() .DataFactory}",
								"emailto": "ravindraimmaneni222@gmail.com",
								"pipelinename": "@{pipeline() .pipeline}",
								"errormessage": "pipeline Succeeded!",
								"status": "@{activity('nani copy activity').status}",
								"runid": "@{pipeline().RunId}"
							}
						}
					},
					{
						"name": "failure_Notification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "nani copy activity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-29.eastus.logic.azure.com:443/workflows/8f65e748c5f74d2eb78d734440d95c2a/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=ZMLLKdXaIBJSoN5J8jGzsqzJXjFMmy5IZJoecK0toz0",
							"method": "POST",
							"headers": {},
							"body": {
								"datafactoryname": "@{pipeline() .DataFactory}",
								"emailto": "ravindraimmaneni222@gmail.com",
								"pipelinename": "@{pipeline() .pipeline}",
								"errormessage": "pipeline Failed!",
								"status": "@{activity('nani copy activity').status}",
								"runid": "@{pipeline().RunId}"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ppschemaname": {
						"type": "string"
					},
					"pptablename": {
						"type": "string"
					},
					"ppcontainername": {
						"type": "string"
					},
					"ppfilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-09-23T12:37:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_sql_source')]",
				"[concat(variables('factoryId'), '/datasets/DS_abs_json_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait 20 seconds",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 20
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_newsql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Sales_LOAD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_newsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BLOB_for_tables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_newblob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().containername",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_newblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CopyMultipleFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_newblob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().SourceFileName",
							"type": "Expression"
						},
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_newblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_MultipleFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_newblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "   Name",
						"type": "String"
					},
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "model",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_newblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_abs_json_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_newblob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sinkcontainer": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().sinkcontainer",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_newblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_loadcsvformat')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_newblob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_newblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_readtables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_newsql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"TableSchema": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().TableSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_newsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_sqlLoadMultipletables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_newsql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"TableSchema": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().TableSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_newsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_sqlLoadTables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_newsql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_newsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_sql_Gettablelist')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_newsql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_newsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_sql_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_newsql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourcetablename": {
						"type": "string"
					},
					"sourceschemaname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().sourceschemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().sourcetablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_newsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_sql_tables_exists')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_newsql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_newsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_sweettreats')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_newblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_newblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_keyvault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_keyvault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_newblob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_keyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_newblob_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_keyvault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_newsql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_newsql_connectionString')]"
				}
			},
			"dependsOn": []
		}
	]
}